#!/usr/bin/env python

import numpy
import scipy.linalg
import os
from pyscf import scf
from pyscf import gto
from pyscf import mcscf, dmrgscf, fci
from pyscf import tools
from pyscf import ao2mo
from pyscf import symm
from pyscf.dmrgscf import DMRGCI
from pyscf.tools import molden
from pyscf.tools import dump_mat

from pyscf.dmrgscf import settings
settings.MPIPREFIX = '/opt/openmpi/1.8.4/bin/mpirun -x OMP_NUM_THREADS=1 -x MKL_NUM_THREADS=1 -np 12'
settings.BLOCKSCRATCHDIR = '/scratch/jluis/lif'

'''
Scan LiF molecule singlet A1 state dissociation curve and first 
2 excitated states.

CASSCF initial guess are generated by function: project_init_guess.  
In the following calculation for each single point on the enregy curve, 
the CASSCF wavefunction may be sensitive to the initial guess. One 
method to provide the right initial guess is to project the wavefunction 
from closed points. It was done by project_init_guess function.

In a final step a DMRG FCI like, using CASSCF(16,8) as initial guess is
performed, and the 1/2-RDM are computed and printed.
'''

ehf = []
emc = []
edmrg1 = []
edmrg2 = []
edmrg3 = []

def run(b, dm, mo_mc):
    print('###################################################################')
    print('###################################################################')
    print('Runing point %4.3f ' % b)
    print('###################################################################')
    print('###################################################################')
    mol = gto.Mole()
    mol.verbose = 4
    mol.output = 'out_lif-%4.3f' % b
    mol.atom = [
        ["Li", (0., 0., 0.)],
        ["F", (0., 0., b)],]
    mol.basis = 'cc-pvdz'
    mol.symmetry = 1
    mol.symmetry_subgroup = 'C2v'
    mol.max_memory = 60000
    mol.spin = 0
    mol.charge = 0
    mol.build()

    #RHF
    mf = scf.RHF(mol)
    #ehf.append(mf.scf(dm))
    ehf.append(mf.scf())

    #CASSCF guess for DMRG-FCI
    mc = mcscf.CASSCF(mf, 8, 8)
    mc.fcisolver.wfnsym = 'A1'
    mc.max_cycle_macro = 150
    mc.max_cycle_micro = 7
    mc.kernel()
    mo = mc.mo_coeff
    mc = mcscf.CASSCF(mf, 12, 12)
    mc.fcisolver.wfnsym = 'A1'
    #fci.addons.fix_spin_(mc.fcisolver, shift=.5, ss_value=0)
    mc.max_cycle_macro = 150
    mc.max_cycle_micro = 7
    mc.state_average_([.33333333333,.3333333333,.33333333333])
    #if mo_mc is None:
    #    mo_mc = mf.mo_coeff
    #else:
    #    mo_mc = mcscf.project_init_guess(mc, mo_mc)
    #e1 = mc.mc1step(mo_mc)[0]
    e1 = mc.mc1step(mo)[0]
    emc.append(e1)
    mo_mc = mc.mo_coeff

    #DMRG-FCI section
    name = 'lif-%4.3f' % b
    mc = mcscf.CASCI(mf, mf.mo_coeff.shape[1], mol.nelectron)
    mc.fcisolver = DMRGCI(mol)
    mc.fcisolver.maxIter = 150
    mc.fcisolver.dmrg_switch_tol = 1e-8
    mc.fcisolver.scheduleSweeps = [    0,    2,    4,    6,    8,   10,   12,   14,   18,   22,   26,   30,   44 ]
    mc.fcisolver.scheduleMaxMs  = [  200,  500,  700, 1000, 1300, 1600, 1900, 2200, 2400, 2400, 2800, 2800, 3200 ]
    mc.fcisolver.scheduleTols   = [ 1e-4, 1e-4, 1e-4, 1e-4, 1e-4, 1e-4, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-8, 1e-8 ]
    mc.fcisolver.scheduleNoises = [ 1e-2, 1e-2, 1e-2, 1e-3, 1e-3, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8,  0.0,  0.0 ]
    mc.fcisolver.twodot_to_onedot = 70
    mc.fcisolver.configFile = "block-"+name+".conf"
    mc.fcisolver.outputFile = "block-"+name+".out"
    mc.fcisolver.integralFile = "FCIDUMP-"+name
    #
    mc.fcisolver.tol = 1e-8
    mc.fcisolver.max_cycle = 150
    mc.fcisolver.wfnsym = 'A1'
    mc.fcisolver.nroots = 3
    #
    e_2 = mc.kernel(mo_mc)[0]
    #
    edmrg1.append(e_2[0])
    edmrg2.append(e_2[1])
    edmrg3.append(e_2[2])
    # INFO
    nmo = mc.mo_coeff.shape[1]
    with open(name+'_gs.mol', 'w') as f2:
        molden.header(mol, f2)
        molden.orbital_coeff(mol, f2, mc.mo_coeff, occ=mf.mo_occ)
    cmd = '/opt/uovi/jluis/bin/molden2aim '+name+'_gs'
    os.system(cmd)
    with open(name+'_fs.mol', 'w') as f2:
        molden.header(mol, f2)
        molden.orbital_coeff(mol, f2, mc.mo_coeff, occ=mf.mo_occ)
    cmd = '/opt/uovi/jluis/bin/molden2aim '+name+'_fs'
    os.system(cmd)
    with open(name+'_ss.mol', 'w') as f2:
        molden.header(mol, f2)
        molden.orbital_coeff(mol, f2, mc.mo_coeff, occ=mf.mo_occ)
    cmd = '/opt/uovi/jluis/bin/molden2aim '+name+'_ss'
    os.system(cmd)
##########################################################################################
    rdm1_gs, rdm2_gs = mc.fcisolver.make_rdm12(mc.ci[0], nmo, mol.nelectron)
    den_file = name + '_gs.den'
    fspt = open(den_file,'w')
    fspt.write('CCIQA    ENERGY =      0.000000000000 THE VIRIAL(-V/T)=   2.00000000\n')
    fspt.write('La matriz D es:\n')
    for i in range(nmo):
        for j in range(nmo):
            fspt.write('%i %i %.16f\n' % ((i+1), (j+1), rdm1_gs[i,j]))
    fspt.write('La matriz d es:\n')
    for i in range(nmo):
        for j in range(nmo):
            for k in range(nmo):
                for l in range(nmo):
                    if (abs(rdm2_gs[i,j,k,l]) > 1e-12):
                            fspt.write('%i %i %i %i %.16f\n' % ((i+1), (j+1), (k+1), (l+1), rdm2_gs[i,j,k,l]))
    fspt.close()                    
##########################################################################################
    cmd = 'cat ' + name+'_gs.den ' + '>> ' + name+'_gs.wfn'
    os.system(cmd)
    pmd_file = name + '_gs.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s_gs.wfn\n' % name)
    fspt.write('bind2mat\n')
    fspt.write('spread\n')
    fspt.write('threads 12\n')
    fspt.write('tes\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 451\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    fspt.write('  betarad 9 %5.4f\n' % (b*0.7*0.6))
    fspt.write('  betarad 3 %5.4f\n' % (b*0.3*0.6))
    fspt.write('  radialquadbeta 4\n')
    fspt.write('  rmappingbeta 2\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 351\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    
    imol_file = name + '_gs.imol'
    fspt = open(imol_file,'w')
    fspt.write('%s' % name+'_gs.wfn')
    fspt.close()                    
##########################################################################################
    #
    # 'natural' occupations and orbitals
    #
    print('\n==============================Natural GS orbitals and occupations')
    eig, coeff = scipy.linalg.eigh(-rdm1_gs)
    eig[abs(eig)<1.e-12]=0.0
    print('Natural occupancy %s ' % -eig)
    for i, k in enumerate(numpy.argmax(abs(coeff), axis=0)):
        if coeff[k,i] < 0:
            coeff[:,i] *= -1
    coeff = numpy.dot(mc.mo_coeff, coeff)
    thresh = 0.010
    nocc = -eig
    active = (thresh <= nocc) & (nocc <= 2-thresh)
    print('\nNatural orbitals:')
    for i in range(nmo):
        print('orb:',i,active[i],nocc[i])
        actIndices = numpy.where(active)[0]
    #
    occ_file = name + '_gs_noon.txt'
    fspt = open(occ_file,'w')
    for i in range(nmo):
        fspt.write('%i %12.8f\n' % ((i+1), nocc[i]))
    fspt.close()                    
    #
    print('Num active orbitals %d' % len(actIndices))
    print('active orbital indices %s' % actIndices)
    tools.molden.from_mo(mol, name+'_no_gs.mol', coeff)
##########################################################################################
    rdm1_fs, rdm2_fs = mc.fcisolver.make_rdm12(mc.ci[1], nmo, mol.nelectron)
    den_file = name + '_fs.den'
    fspt = open(den_file,'w')
    fspt.write('CCIQA    ENERGY =      0.000000000000 THE VIRIAL(-V/T)=   2.00000000\n')
    fspt.write('La matriz D es:\n')
    for i in range(nmo):
        for j in range(nmo):
            fspt.write('%i %i %.16f\n' % ((i+1), (j+1), rdm1_fs[i,j]))
    fspt.write('La matriz d es:\n')
    for i in range(nmo):
        for j in range(nmo):
            for k in range(nmo):
                for l in range(nmo):
                    if (abs(rdm2_fs[i,j,k,l]) > 1e-12):
                            fspt.write('%i %i %i %i %.16f\n' % ((i+1), (j+1), (k+1), (l+1), rdm2_fs[i,j,k,l]))
    fspt.close()                    
##########################################################################################
    cmd = 'cat ' + name+'_fs.den ' + '>> ' + name+'_fs.wfn'
    os.system(cmd)
    pmd_file = name + '_fs.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s_fs.wfn\n' % name)
    fspt.write('bind2mat\n')
    fspt.write('spread\n')
    fspt.write('threads 12\n')
    fspt.write('tes\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 451\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    fspt.write('  betarad 9 %5.4f\n' % (b*0.7*0.6))
    fspt.write('  betarad 3 %5.4f\n' % (b*0.3*0.6))
    fspt.write('  radialquadbeta 4\n')
    fspt.write('  rmappingbeta 2\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 351\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    
    imol_file = name + '_fs.imol'
    fspt = open(imol_file,'w')
    fspt.write('%s' % name+'_fs.wfn')
    fspt.close()                    
##########################################################################################
    #
    # 'natural' occupations and orbitals
    #
    print('\n==============================Natural FS orbitals and occupations')
    eig, coeff = scipy.linalg.eigh(-rdm1_fs)
    eig[abs(eig)<1.e-12]=0.0
    print('Natural occupancy %s ' % -eig)
    for i, k in enumerate(numpy.argmax(abs(coeff), axis=0)):
        if coeff[k,i] < 0:
            coeff[:,i] *= -1
    coeff = numpy.dot(mc.mo_coeff, coeff)
    thresh = 0.010
    nocc = -eig
    active = (thresh <= nocc) & (nocc <= 2-thresh)
    print('\nNatural orbitals:')
    for i in range(nmo):
        print('orb:',i,active[i],nocc[i])
        actIndices = numpy.where(active)[0]
    #
    occ_file = name + '_fs_noon.txt'
    fspt = open(occ_file,'w')
    for i in range(nmo):
        fspt.write('%i %12.8f\n' % ((i+1), nocc[i]))
    fspt.close()                    
    #
    print('Num active orbitals %d' % len(actIndices))
    print('active orbital indices %s' % actIndices)
    tools.molden.from_mo(mol, name+'_no_fs.mol', coeff)
##########################################################################################
    rdm1_ss, rdm2_ss = mc.fcisolver.make_rdm12(mc.ci[2], nmo, mol.nelectron)
    den_file = name + '_ss.den'
    fspt = open(den_file,'w')
    fspt.write('CCIQA    ENERGY =      0.000000000000 THE VIRIAL(-V/T)=   2.00000000\n')
    fspt.write('La matriz D es:\n')
    for i in range(nmo):
        for j in range(nmo):
            fspt.write('%i %i %.16f\n' % ((i+1), (j+1), rdm1_ss[i,j]))
    fspt.write('La matriz d es:\n')
    for i in range(nmo):
        for j in range(nmo):
            for k in range(nmo):
                for l in range(nmo):
                    if (abs(rdm2_ss[i,j,k,l]) > 1e-12):
                            fspt.write('%i %i %i %i %.16f\n' % ((i+1), (j+1), (k+1), (l+1), rdm2_ss[i,j,k,l]))
    fspt.close()                    
##########################################################################################
    cmd = 'cat ' + name+'_ss.den ' + '>> ' + name+'_ss.wfn'
    os.system(cmd)
    pmd_file = name + '_ss.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s_ss.wfn\n' % name)
    fspt.write('bind2mat\n')
    fspt.write('spread\n')
    fspt.write('threads 12\n')
    fspt.write('tes\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 451\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    fspt.write('  betarad 9 %5.4f\n' % (b*0.7*0.6))
    fspt.write('  betarad 3 %5.4f\n' % (b*0.3*0.6))
    fspt.write('  radialquadbeta 4\n')
    fspt.write('  rmappingbeta 2\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 351\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    
    imol_file = name + '_ss.imol'
    fspt = open(imol_file,'w')
    fspt.write('%s' % name+'_ss.wfn')
    fspt.close()                    
##########################################################################################
    #
    # 'natural' occupations and orbitals
    #
    print('\n==============================Natural SS orbitals and occupations')
    eig, coeff = scipy.linalg.eigh(-rdm1_ss)
    eig[abs(eig)<1.e-12]=0.0
    print('Natural occupancy %s ' % -eig)
    for i, k in enumerate(numpy.argmax(abs(coeff), axis=0)):
        if coeff[k,i] < 0:
            coeff[:,i] *= -1
    coeff = numpy.dot(mc.mo_coeff, coeff)
    thresh = 0.010
    nocc = -eig
    active = (thresh <= nocc) & (nocc <= 2-thresh)
    print('\nNatural orbitals:')
    for i in range(nmo):
        print('orb:',i,active[i],nocc[i])
        actIndices = numpy.where(active)[0]
    #
    occ_file = name + '_ss_noon.txt'
    fspt = open(occ_file,'w')
    for i in range(nmo):
        fspt.write('%i %12.8f\n' % ((i+1), nocc[i]))
    fspt.close()                    
    #
    print('Num active orbitals %d' % len(actIndices))
    print('active orbital indices %s' % actIndices)
    tools.molden.from_mo(mol, name+'_no_ss.mol', coeff)
##########################################################################################
    print('###################################################################')
    print('###################################################################')
    print('###################################################################')
    print('###################################################################')

    return mf.make_rdm1(), mo_mc

dm = mo = None
for b in numpy.arange(7.42, 9.51, 0.1):
    dm, mo = run(b, dm, mo)
